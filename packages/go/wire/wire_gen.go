// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/shadowfish07/FlexiBook/controllers"
	"github.com/shadowfish07/FlexiBook/repositories"
	"github.com/shadowfish07/FlexiBook/routes"
	"github.com/shadowfish07/FlexiBook/services"
	"github.com/shadowfish07/FlexiBook/storage"
	"github.com/spf13/afero"
)

// Injectors from wire.go:

func InitializeApp(mountDir string, useMemoryFs bool) (*gin.Engine, error) {
	websiteService := services.NewWebsiteService()
	websiteController := controllers.NewWebsiteController(websiteService)
	systemController := controllers.NewSystemController()
	storageStorage := NewStorageWithAfero(mountDir, useMemoryFs)
	database := storage.NewDatabase(storageStorage)
	bookmarkRepository := repositories.NewBookmarkRepository(database)
	bookmarkService := services.NewBookmarkService(bookmarkRepository)
	bookmarkController := controllers.NewBookmarkController(bookmarkService)
	operation := storage.NewOperation(storageStorage)
	operationRepository := repositories.NewOperationRepository(operation)
	bookmarkEntity := services.NewBookmarkEntity(bookmarkService)
	categoryRepository := repositories.NewCategoryRepository(database)
	categoryService := services.NewCategoryService(categoryRepository)
	categoryEntity := services.NewCategoryEntity(categoryService)
	tagRepository := repositories.NewTagRepository(database)
	tagService := services.NewTagService(tagRepository)
	tagEntity := services.NewTagEntity(tagService)
	entity := services.NewEntity(bookmarkEntity, categoryEntity, tagEntity)
	syncRepository := repositories.NewSyncRepository(database)
	configRepository := repositories.NewConfigRepository(database)
	configService := services.NewConfigService(configRepository)
	syncService := services.NewSyncService(operationRepository, bookmarkService, entity, syncRepository, configRepository, configService)
	syncController := controllers.NewSyncController(syncService)
	configController := controllers.NewConfigController(configService)
	oauth := storage.NewOauth(storageStorage)
	oauthRepository := repositories.NewOauthRepository(oauth)
	authService := services.NewAuthService(configRepository, oauthRepository)
	invitationRepository := repositories.NewInvitationRepository(oauth)
	invitationService := services.NewInvitationService(invitationRepository, oauthRepository, authService)
	authController := controllers.NewAuthController(authService, invitationService)
	engine := routes.RegisterRoutes(websiteController, systemController, bookmarkController, syncController, configController, authService, authController)
	return engine, nil
}

// wire.go:

var controllerSet = wire.NewSet(controllers.NewBookmarkController, controllers.NewSyncController, controllers.NewSystemController, controllers.NewWebsiteController, controllers.NewConfigController, controllers.NewAuthController)

var repositorySet = wire.NewSet(repositories.NewBookmarkRepository, repositories.NewCategoryRepository, repositories.NewOperationRepository, repositories.NewTagRepository, repositories.NewSyncRepository, repositories.NewConfigRepository, repositories.NewOauthRepository, repositories.NewInvitationRepository)

var serviceSet = wire.NewSet(services.NewEntity, services.NewBookmarkEntity, services.NewCategoryEntity, services.NewTagEntity, services.NewBookmarkService, services.NewCategoryService, services.NewTagService, services.NewWebsiteService, services.NewSyncService, services.NewConfigService, services.NewAuthService, services.NewInvitationService)

var storageSet = wire.NewSet(storage.NewDatabase, storage.NewOperation, storage.NewOauth, NewStorageWithAfero)

func NewStorageWithAfero(mountDir string, useMemoryFs bool) *storage.Storage {
	var fs afero.Fs
	if useMemoryFs {
		fs = afero.NewMemMapFs()
	} else {
		fs = afero.NewOsFs()
	}
	return storage.NewStorage(mountDir, fs)
}
